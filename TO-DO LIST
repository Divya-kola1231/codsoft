#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>

using namespace std;

struct Task {
    string description;
    bool isCompleted;
};

vector<Task> taskList;

void clearConsole() {
    #if defined(_WIN32)
        system("cls");
    #else
        system("clear");
    #endif
}

void printColoredText(const string& text, const string& color) {
    string colorCode;
    if (color == "red") {
        colorCode = "\033[1;31m";
    } else if (color == "green") {
        colorCode = "\033[1;32m";
    } else if (color == "yellow") {
        colorCode = "\033[1;33m";
    } else if (color == "blue") {
        colorCode = "\033[1;34m";
    } else {
        colorCode = "\033[0m";
    }
    cout << colorCode << text << "\033[0m";
}

void addTask() {
    Task newTask;
    cout << "Enter task description: ";
    cin.ignore();
    getline(cin, newTask.description);
    newTask.isCompleted = false;
    taskList.push_back(newTask);
    clearConsole();
    printColoredText("Task added successfully.\n", "green");
}

void viewTasks() {
    clearConsole();
    if (taskList.empty()) {
        printColoredText("No tasks available.\n", "yellow");
    } else {
        for (size_t i = 0; i < taskList.size(); ++i) {
            cout << i + 1 << ". " << taskList[i].description 
                 << " [" << (taskList[i].isCompleted ? "\033[1;32mCompleted\033[0m" : "\033[1;31mPending\033[0m") << "]" << endl;
        }
    }
}

void markTaskCompleted() {
    int taskNumber;
    cout << "Enter task number to toggle completion: ";
    cin >> taskNumber;
    if (taskNumber > 0 && taskNumber <= taskList.size()) {
        taskList[taskNumber - 1].isCompleted = !taskList[taskNumber - 1].isCompleted;
        clearConsole();
        printColoredText("Task completion status toggled.\n", "green");
    } else {
        clearConsole();
        printColoredText("Invalid task number.\n", "red");
    }
}

void removeTask() {
    int taskNumber;
    cout << "Enter task number to remove: ";
    cin >> taskNumber;
    if (taskNumber > 0 && taskNumber <= taskList.size()) {
        taskList.erase(taskList.begin() + taskNumber - 1);
        clearConsole();
        printColoredText("Task removed successfully.\n", "green");
    } else {
        clearConsole();
        printColoredText("Invalid task number.\n", "red");
    }
}

void editTask() {
    int taskNumber;
    cout << "Enter task number to edit: ";
    cin >> taskNumber;
    if (taskNumber > 0 && taskNumber <= taskList.size()) {
        cout << "Enter new description: ";
        cin.ignore();
        getline(cin, taskList[taskNumber - 1].description);
        clearConsole();
        printColoredText("Task updated successfully.\n", "green");
    } else {
        clearConsole();
        printColoredText("Invalid task number.\n", "red");
    }
}

void taskManager() {
    int choice;
    do {
        cout << "\n\033[1;34mTo-Do List Menu:\033[0m" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Toggle Task Completion" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Edit Task" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: 
                addTask(); 
                break;
            case 2: 
                viewTasks(); 
                break;
            case 3: 
                markTaskCompleted(); 
                break;
            case 4: 
                removeTask(); 
                break;
            case 5: 
                editTask(); 
                break;
            case 6: 
                clearConsole();
                printColoredText("Exiting To-Do List Manager...\n", "blue"); 
                break;
            default: 
                clearConsole();
                printColoredText("Invalid choice. Please try again.\n", "red"); 
                break;
        }
    } while (choice != 6);
}

int main() {
    clearConsole();
    taskManager();
    return 0;
}
